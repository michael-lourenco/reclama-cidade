model Marker {
  id            String        @id @default(cuid())
  lat           Float
  lng           Float
  type          String
  createdAt     DateTime     @default(now())
  userEmail     String
  user          User?        @relation("UserMarkers", fields: [userEmail], references: [email])
  currentStatus ProblemStatus @default(REPORTED)
  statusHistory StatusChange[]
  likedBy       String[]     // emails de usuários que curtiram
  resolvedBy    String[]     // emails de usuários que resolveram
}

model StatusChange {
  id         String        @id @default(cuid())
  markerId   String
  marker     Marker        @relation(fields: [markerId], references: [id], onDelete: Cascade)
  status     ProblemStatus
  timestamp  DateTime      @default(now())
  comment    String?
  updatedBy  String        // email do usuário
}

enum ProblemStatus {
  REPORTED
  UNDER_ANALYSIS
  VERIFIED
  IN_PROGRESS
  RESOLVED
  CLOSED
  REOPENED
}
generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id            String    @id @default(cuid())
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  accounts      Account[]
  sessions      Session[]
  markers       Marker[]  @relation("UserMarkers")
}

model Account {
  id                String  @id @default(cuid())
  userId            String
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?
  user              User    @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
}

model Session {
  id           String   @id @default(cuid())
  sessionToken String   @unique
  userId       String
  expires      DateTime
  user         User     @relation(fields: [userId], references: [id], onDelete: Cascade)
}

model VerificationToken {
  identifier String
  token      String   @unique
  expires    DateTime

  @@unique([identifier, token])
}

// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init
